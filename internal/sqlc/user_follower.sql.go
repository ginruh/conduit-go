// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user_follower.sql

package sqlc

import (
	"context"
)

const followUser = `-- name: FollowUser :exec
INSERT INTO user_follower (user_id, follower_id)
VALUES ($1, $2)
`

type FollowUserParams struct {
	UserID     int32
	FollowerID int32
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) error {
	_, err := q.db.ExecContext(ctx, followUser, arg.UserID, arg.FollowerID)
	return err
}

const getFollowers = `-- name: GetFollowers :many
SELECT user_id, follower_id, created_at, updated_at FROM user_follower
WHERE user_id = $1
`

func (q *Queries) GetFollowers(ctx context.Context, userID int32) ([]UserFollower, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserFollower
	for rows.Next() {
		var i UserFollower
		if err := rows.Scan(
			&i.UserID,
			&i.FollowerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM user_follower
WHERE user_id = $1 AND follower_id = $2
`

type UnfollowUserParams struct {
	UserID     int32
	FollowerID int32
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.ExecContext(ctx, unfollowUser, arg.UserID, arg.FollowerID)
	return err
}
